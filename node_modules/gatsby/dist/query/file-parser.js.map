{"version":3,"sources":["../../src/query/file-parser.js"],"names":["fs","require","crypto","_","slugify","getGraphQLTag","StringInterpolationNotAllowedError","EmptyGraphQLTagError","GraphQLSyntaxError","report","apiRunnerNode","actions","store","generateQueryName","def","hash","file","name","value","slugified","replacement","lower","camelCase","kind","followVariableDeclarations","binding","node","path","type","id","init","scope","getBinding","referencesGatsby","callee","calleeName","referencesImport","declaration","arguments","isUseStaticQuery","property","get","object","warnForUnknownQueryVariable","varName","usageFunction","warn","parseToAst","filePath","fileStr","parentSpan","addError","ast","transpiled","filename","contents","length","item","tmp","error","undefined","context","dispatch","queryExtractionGraphQLError","componentPath","queryExtractionBabelError","panicOnGlobalTag","panicOnBuild","findApiExport","api","hasExport","apiToFind","ExportNamedDeclaration","t","isExportNamedDeclaration","specifiers","some","specifier","isExportSpecifier","isIdentifier","exported","apiToCheck","isFunctionDeclaration","isVariableDeclaration","declarations","findGraphQLTags","documents","documentLocations","WeakMap","extractStaticQuery","taggedTemplateExpressPath","isHook","gqlAst","text","isGlobal","definitions","forEach","templateLoc","traverse","TemplateElement","templateElementPath","loc","docInFile","doc","isStaticQuery","set","start","push","JSXElement","openingElement","JSXAttribute","jsxPath","TaggedTemplateExpression","templatePath","Identifier","identifierPath","found","VariableDeclarator","varPath","CallExpression","hookPath","firstArg","isTaggedTemplateExpression","innerPath","state","source","ExportSpecifier","local","uniqueQueries","uniqBy","q","cache","FileParser","constructor","parseFile","readFile","err","includes","createHash","update","digest","astDefinitions","serverData","payload","queryExtractedBabelSuccess","structuredError","location","interpolationStart","end","interpolationEnd","codeFrame","highlightCode","process","env","FORCE_COLOR","originalError","locations","message","sourceMessage","parseFiles","files","Promise","all","map","then","docs"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\n// @flow\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\nconst _ = require(`lodash`)\nconst slugify = require(`slugify`)\n\n// Traverse is a es6 module...\nimport traverse from \"@babel/traverse\"\nimport * as t from \"@babel/types\"\nconst {\n  getGraphQLTag,\n  StringInterpolationNotAllowedError,\n  EmptyGraphQLTagError,\n  GraphQLSyntaxError,\n} = require(`babel-plugin-remove-graphql-queries`)\n\nconst report = require(`gatsby-cli/lib/reporter`)\n\nimport type { DocumentNode } from \"graphql\"\nimport { babelParseToAst } from \"../utils/babel-parse-to-ast\"\nimport { codeFrameColumns } from \"@babel/code-frame\"\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { actions } = require(`../redux/actions`)\nconst { store } = require(`../redux`)\nimport { locInGraphQlToLocInFile } from \"./error-parser\"\n/**\n * Add autogenerated query name if it wasn't defined by user.\n */\nconst generateQueryName = ({ def, hash, file }) => {\n  if (!def.name || !def.name.value) {\n    const slugified = slugify(file, {\n      replacement: ` `,\n      lower: false,\n    })\n    def.name = {\n      value: `${_.camelCase(slugified)}${hash}`,\n      kind: `Name`,\n    }\n  }\n  return def\n}\n\n// taken from `babel-plugin-remove-graphql-queries`, in the future import from\n// there\nfunction followVariableDeclarations(binding) {\n  const node = binding?.path?.node\n  if (\n    node?.type === `VariableDeclarator` &&\n    node?.id.type === `Identifier` &&\n    node?.init?.type === `Identifier`\n  ) {\n    return followVariableDeclarations(\n      binding.path.scope.getBinding(node.init.name)\n    )\n  }\n  return binding\n}\n\nfunction referencesGatsby(path, callee, calleeName) {\n  // This works for es6 imports\n  if (callee.referencesImport(`gatsby`, ``)) {\n    return true\n  } else {\n    // This finds where userStaticQuery was declared and then checks\n    // if it is a \"require\" and \"gatsby\" is the argument.\n    const declaration = path.scope.getBinding(calleeName)\n    if (\n      declaration &&\n      declaration.path.node.init?.callee.name === `require` &&\n      declaration.path.node.init.arguments[0].value === `gatsby`\n    ) {\n      return true\n    } else {\n      return false\n    }\n  }\n}\n\nfunction isUseStaticQuery(path) {\n  const callee = path.node.callee\n  if (callee.type === `MemberExpression`) {\n    const property = callee.property\n    if (property.name === `useStaticQuery`) {\n      return referencesGatsby(\n        path,\n        path.get(`callee`).get(`object`),\n        path.node?.callee.object.name\n      )\n    }\n    return false\n  }\n  if (callee.name === `useStaticQuery`) {\n    return referencesGatsby(path, path.get(`callee`), path.node?.callee.name)\n  }\n  return false\n}\n\nconst warnForUnknownQueryVariable = (varName, file, usageFunction) =>\n  report.warn(\n    `\\nWe were unable to find the declaration of variable \"${varName}\", which you passed as the \"query\" prop into the ${usageFunction} declaration in \"${file}\".\n\nPerhaps the variable name has a typo?\n\nAlso note that we are currently unable to use queries defined in files other than the file where the ${usageFunction} is defined. If you're attempting to import the query, please move it into \"${file}\". If being able to import queries from another file is an important capability for you, we invite your help fixing it.\\n`\n  )\n\nasync function parseToAst(filePath, fileStr, { parentSpan, addError } = {}) {\n  let ast\n\n  // Preprocess and attempt to parse source; return an AST if we can, log an\n  // error if we can't.\n  const transpiled = await apiRunnerNode(`preprocessSource`, {\n    filename: filePath,\n    contents: fileStr,\n    parentSpan,\n  })\n\n  if (transpiled && transpiled.length) {\n    for (const item of transpiled) {\n      try {\n        const tmp = babelParseToAst(item, filePath)\n        ast = tmp\n        break\n      } catch (error) {\n        // We emit the actual error below if every transpiled variant fails to parse\n      }\n    }\n    if (ast === undefined) {\n      addError({\n        id: `85912`,\n        filePath,\n        context: {\n          filePath,\n        },\n      })\n      store.dispatch(\n        actions.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n      )\n\n      return null\n    }\n  } else {\n    try {\n      ast = babelParseToAst(fileStr, filePath)\n    } catch (error) {\n      store.dispatch(\n        actions.queryExtractionBabelError({\n          componentPath: filePath,\n          error,\n        })\n      )\n\n      addError({\n        id: `85911`,\n        filePath,\n        context: {\n          filePath,\n        },\n      })\n\n      return null\n    }\n  }\n\n  return ast\n}\n\nconst panicOnGlobalTag = file =>\n  report.panicOnBuild(\n    `Using the global \\`graphql\\` tag for Gatsby's queries isn't supported as of v3.\\n` +\n      `Import it instead like:  import { graphql } from 'gatsby' in file:\\n` +\n      file\n  )\n\ntype GraphQLDocumentInFile = {\n  filePath: string,\n  doc: DocumentNode,\n  templateLoc: string,\n  text: string,\n  hash: string,\n  isHook: boolean,\n  isStaticQuery: boolean,\n}\n\n// Adapted from gatsby/src/utils/babel/babel-plugin-remove-api\nfunction findApiExport(ast, api) {\n  let hasExport = false\n  const apiToFind = api ?? ``\n\n  traverse(ast, {\n    ExportNamedDeclaration(path) {\n      const declaration = path.node.declaration\n\n      if (t.isExportNamedDeclaration(path.node) && !hasExport) {\n        hasExport = path.node.specifiers.some(\n          specifier =>\n            t.isExportSpecifier(specifier) &&\n            t.isIdentifier(specifier.exported) &&\n            specifier.exported.name === apiToFind\n        )\n      }\n\n      let apiToCheck\n      if (t.isFunctionDeclaration(declaration) && declaration.id) {\n        apiToCheck = declaration.id.name\n      }\n\n      if (\n        t.isVariableDeclaration(declaration) &&\n        t.isIdentifier(declaration.declarations[0].id)\n      ) {\n        apiToCheck = declaration.declarations[0].id.name\n      }\n\n      if (apiToCheck && apiToCheck === apiToFind) {\n        hasExport = true\n      }\n    },\n  })\n\n  return hasExport\n}\n\nasync function findGraphQLTags(\n  file,\n  ast,\n  { parentSpan, addError } = {}\n): Promise<Array<GraphQLDocumentInFile>> {\n  const documents = []\n  if (!ast) {\n    return documents\n  }\n\n  /**\n   * A map of graphql documents to unique locations.\n   *\n   * A graphql document's unique location is made of:\n   *\n   *  - the location of the graphql template literal that contains the document, and\n   *  - the document's location within the graphql template literal\n   *\n   * This is used to prevent returning duplicated documents.\n   */\n  const documentLocations = new WeakMap()\n\n  const extractStaticQuery = (taggedTemplateExpressPath, isHook = false) => {\n    const {\n      ast: gqlAst,\n      text,\n      hash,\n      isGlobal,\n    } = getGraphQLTag(taggedTemplateExpressPath)\n    if (!gqlAst) return\n\n    if (isGlobal) {\n      panicOnGlobalTag(file)\n      return\n    }\n\n    gqlAst.definitions.forEach(def => {\n      generateQueryName({\n        def,\n        hash,\n        file,\n      })\n    })\n\n    let templateLoc\n\n    taggedTemplateExpressPath.traverse({\n      TemplateElement(templateElementPath) {\n        templateLoc = templateElementPath.node.loc\n      },\n    })\n\n    const docInFile = {\n      filePath: file,\n      doc: gqlAst,\n      text: text,\n      hash: hash,\n      isStaticQuery: true,\n      isHook,\n      templateLoc,\n    }\n\n    documentLocations.set(\n      docInFile,\n      `${taggedTemplateExpressPath.node.start}-${gqlAst.loc.start}`\n    )\n\n    documents.push(docInFile)\n  }\n\n  // Look for queries in <StaticQuery /> elements.\n  traverse(ast, {\n    JSXElement(path) {\n      if (path.node.openingElement.name.name !== `StaticQuery`) {\n        return\n      }\n\n      // astexplorer.com link I (@kyleamathews) used when prototyping this algorithm\n      // https://astexplorer.net/#/gist/ab5d71c0f08f287fbb840bf1dd8b85ff/2f188345d8e5a4152fe7c96f0d52dbcc6e9da466\n      path.traverse({\n        JSXAttribute(jsxPath) {\n          if (jsxPath.node.name.name !== `query`) {\n            return\n          }\n          jsxPath.traverse({\n            // Assume the query is inline in the component and extract that.\n            TaggedTemplateExpression(templatePath) {\n              extractStaticQuery(templatePath)\n            },\n            // Also see if it's a variable that's passed in as a prop\n            // and if it is, go find it.\n            Identifier(identifierPath) {\n              if (identifierPath.node.name !== `graphql`) {\n                const varName = identifierPath.node.name\n                let found = false\n                traverse(ast, {\n                  VariableDeclarator(varPath) {\n                    if (\n                      varPath.node.id.name === varName &&\n                      varPath.node.init.type === `TaggedTemplateExpression`\n                    ) {\n                      varPath.traverse({\n                        TaggedTemplateExpression(templatePath) {\n                          found = true\n                          extractStaticQuery(templatePath)\n                        },\n                      })\n                    }\n                  },\n                })\n                if (!found) {\n                  warnForUnknownQueryVariable(varName, file, `<StaticQuery>`)\n                }\n              }\n            },\n          })\n        },\n      })\n      return\n    },\n  })\n\n  // Look for queries in useStaticQuery hooks.\n  traverse(ast, {\n    CallExpression(hookPath) {\n      if (!isUseStaticQuery(hookPath)) return\n\n      const firstArg = hookPath.get(`arguments`)[0]\n\n      // Assume the query is inline in the component and extract that.\n      if (firstArg.isTaggedTemplateExpression()) {\n        extractStaticQuery(firstArg, true)\n        // Also see if it's a variable that's passed in as a prop\n        // and if it is, go find it.\n      } else if (firstArg.isIdentifier()) {\n        if (\n          firstArg.node.name !== `graphql` &&\n          firstArg.node.name !== `useStaticQuery`\n        ) {\n          const varName = firstArg.node.name\n          let found = false\n          traverse(ast, {\n            VariableDeclarator(varPath) {\n              if (\n                varPath.node.id.name === varName &&\n                varPath.node.init.type === `TaggedTemplateExpression`\n              ) {\n                varPath.traverse({\n                  TaggedTemplateExpression(templatePath) {\n                    found = true\n                    extractStaticQuery(templatePath, true)\n                  },\n                })\n              }\n            },\n          })\n          if (!found) {\n            warnForUnknownQueryVariable(varName, file, `useStaticQuery`)\n          }\n        }\n      }\n    },\n  })\n\n  function TaggedTemplateExpression(innerPath) {\n    const { ast: gqlAst, isGlobal, hash, text } = getGraphQLTag(innerPath)\n    if (!gqlAst) return\n\n    if (isGlobal) {\n      panicOnGlobalTag(file)\n      return\n    }\n\n    gqlAst.definitions.forEach(def => {\n      generateQueryName({\n        def,\n        hash,\n        file,\n      })\n    })\n\n    let templateLoc\n    innerPath.traverse({\n      TemplateElement(templateElementPath) {\n        templateLoc = templateElementPath.node.loc\n      },\n    })\n\n    const docInFile = {\n      filePath: file,\n      doc: gqlAst,\n      text: text,\n      hash: hash,\n      isStaticQuery: false,\n      isHook: false,\n      templateLoc,\n    }\n\n    documentLocations.set(\n      docInFile,\n      `${innerPath.node.start}-${gqlAst.loc.start}`\n    )\n\n    documents.push(docInFile)\n  }\n\n  // When a component has a StaticQuery we scan all of its exports and follow those exported variables\n  // to determine if they lead to this static query (via tagged template literal)\n  traverse(ast, {\n    ExportNamedDeclaration(path, state) {\n      // Skipping the edge case of re-exporting (i.e. \"export { bar } from 'Bar'\")\n      // (it is handled elsewhere for queries, see usages of warnForUnknownQueryVariable)\n      if (path.node.source) {\n        return\n      }\n      path.traverse({\n        TaggedTemplateExpression,\n        ExportSpecifier(path) {\n          const binding = followVariableDeclarations(\n            path.scope.getBinding(path.node.local.name)\n          )\n          binding?.path?.traverse({ TaggedTemplateExpression })\n        },\n      })\n    },\n  })\n\n  // Remove duplicate queries\n  const uniqueQueries = _.uniqBy(documents, q => documentLocations.get(q))\n\n  return uniqueQueries\n}\n\nconst cache = {}\n\nexport default class FileParser {\n  constructor({ parentSpan } = {}) {\n    this.parentSpan = parentSpan\n  }\n\n  async parseFile(file: string, addError): Promise<?DocumentNode> {\n    let text\n    try {\n      text = await fs.readFile(file, `utf8`)\n    } catch (err) {\n      addError({\n        id: `85913`,\n        filePath: file,\n        context: {\n          filePath: file,\n        },\n        error: err,\n      })\n\n      store.dispatch(\n        actions.queryExtractionGraphQLError({\n          componentPath: file,\n        })\n      )\n      return null\n    }\n\n    // We do a quick check so we can exit early if this is a file we're not interested in.\n    // We only process files that either include graphql, or static images\n    if (\n      !text.includes(`graphql`) &&\n      !text.includes(`gatsby-plugin-image`) &&\n      !text.includes(`getServerData`)\n    ) {\n      return null\n    }\n\n    const hash = crypto\n      .createHash(`md5`)\n      .update(file)\n      .update(text)\n      .digest(`hex`)\n\n    try {\n      if (!cache[hash]) {\n        const ast = await parseToAst(file, text, {\n          parentSpan: this.parentSpan,\n          addError,\n        })\n        cache[hash] = {\n          astDefinitions: await findGraphQLTags(file, ast, {\n            parentSpan: this.parentSpan,\n            addError,\n          }),\n          serverData: findApiExport(ast, `getServerData`),\n          // TODO: config: findApiExport(ast, `config`),\n        }\n      }\n      const { astDefinitions, serverData } = cache[hash]\n\n      // Note: we should dispatch this action even when getServerData is not found\n      // (maybe it was set before, so now we need to reset renderMode from SSR to the default one)\n      store.dispatch({\n        type: `SET_COMPONENT_FEATURES`,\n        payload: {\n          componentPath: file,\n          serverData,\n          // TODO: config\n        },\n      })\n\n      // If any AST definitions were extracted, report success.\n      // This can mean there is none or there was a babel error when\n      // we tried to extract the graphql AST.\n      if (astDefinitions.length > 0) {\n        store.dispatch(\n          actions.queryExtractedBabelSuccess({\n            componentPath: file,\n          })\n        )\n      }\n\n      return astDefinitions\n    } catch (err) {\n      // default error\n      let structuredError = {\n        id: `85915`,\n        context: {\n          filePath: file,\n        },\n      }\n\n      if (err instanceof StringInterpolationNotAllowedError) {\n        const location = {\n          start: err.interpolationStart,\n          end: err.interpolationEnd,\n        }\n        structuredError = {\n          id: `85916`,\n          location,\n          context: {\n            codeFrame: codeFrameColumns(text, location, {\n              highlightCode: process.env.FORCE_COLOR !== `0`,\n            }),\n          },\n        }\n      } else if (err instanceof EmptyGraphQLTagError) {\n        const location = err.templateLoc\n          ? {\n              start: err.templateLoc.start,\n              end: err.templateLoc.end,\n            }\n          : null\n\n        structuredError = {\n          id: `85917`,\n          location,\n          context: {\n            codeFrame: location\n              ? codeFrameColumns(text, location, {\n                  highlightCode: process.env.FORCE_COLOR !== `0`,\n                })\n              : null,\n          },\n        }\n      } else if (err instanceof GraphQLSyntaxError) {\n        const location = {\n          start: locInGraphQlToLocInFile(\n            err.templateLoc,\n            err.originalError.locations[0]\n          ),\n        }\n\n        structuredError = {\n          id: `85918`,\n          location,\n          context: {\n            codeFrame: location\n              ? codeFrameColumns(text, location, {\n                  highlightCode: process.env.FORCE_COLOR !== `0`,\n                  message: err.originalError.message,\n                })\n              : null,\n            sourceMessage: err.originalError.message,\n          },\n        }\n      }\n\n      addError({\n        ...structuredError,\n        filePath: file,\n      })\n\n      store.dispatch(\n        actions.queryExtractionGraphQLError({\n          componentPath: file,\n        })\n      )\n      return null\n    }\n  }\n\n  async parseFiles(\n    files: Array<string>,\n    addError\n  ): Promise<Array<DocumentNode>> {\n    const documents = []\n\n    return Promise.all(\n      files.map(file =>\n        this.parseFile(file, addError).then(docs => {\n          documents.push(...(docs || []))\n        })\n      )\n    ).then(() => documents)\n  }\n}\n"],"file":"file-parser.js"}