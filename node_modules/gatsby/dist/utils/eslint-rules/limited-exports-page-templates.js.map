{"version":3,"sources":["../../../src/utils/eslint-rules/limited-exports-page-templates.ts"],"names":["DEFAULT_GRAPHQL_TAG_NAME","isGetServerData","node","declaration","type","id","name","declarations","hasOneValidNamedDeclaration","varName","nonQueryExports","specifiers","some","e","exported","isTemplateQuery","graphqlTagName","namespaceSpecifierName","every","el","init","tag","object","property","limitedExports","meta","messages","limitedExportsPageTemplates","create","context","store","queryVariableName","VariableDeclaration","requiredFromGatsby","find","arguments","quasis","value","raw","graphqlTagSpecifier","properties","key","undefined","ImportDeclaration","source","imported","local","TaggedTemplateExpression","parent","ExportNamedDeclaration","report","messageId","module","exports"],"mappings":"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","sourcesContent":["import { Rule } from \"eslint\"\nimport {\n  Node,\n  Identifier,\n  ImportDeclaration,\n  TaggedTemplateExpression,\n  VariableDeclaration,\n  CallExpression,\n  Literal,\n  TemplateLiteral,\n  VariableDeclarator,\n  ObjectPattern,\n  AssignmentProperty,\n  ExportNamedDeclaration,\n} from \"estree\"\nimport { store } from \"../../redux\"\nimport { isPageTemplate } from \"../eslint-rules-helpers\"\n\nconst DEFAULT_GRAPHQL_TAG_NAME = `graphql`\n\nfunction isGetServerData(node: ExportNamedDeclaration): boolean {\n  // check for\n  // export function getServerData() {}\n  // export async function getServerData() {}\n  if (\n    node.declaration?.type === `FunctionDeclaration` &&\n    node.declaration.id?.name === `getServerData`\n  ) {\n    return true\n  }\n\n  // check for\n  // export const getServerData = () => {}\n  if (node.declaration?.type === `VariableDeclaration`) {\n    for (const declaration of node.declaration.declarations) {\n      if (\n        declaration.type === `VariableDeclarator` &&\n        declaration.id.type === `Identifier` &&\n        declaration.id.name === `getServerData`\n      ) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\nfunction hasOneValidNamedDeclaration(\n  node: Node,\n  varName: string | undefined\n): boolean {\n  // Checks for:\n  // const query = graphql``\n  // export { query }\n  if (\n    node.type === `ExportNamedDeclaration` &&\n    node.declaration === null &&\n    varName\n  ) {\n    // For export { foobar, query } the declaration will be null and specifiers exists\n    // For { foobar, query } it'll return true, for { query } it'll return false\n    const nonQueryExports = node.specifiers.some(\n      e => e.exported.name !== varName\n    )\n    return !nonQueryExports\n  }\n\n  return false\n}\n\nfunction isTemplateQuery(\n  node: Node,\n  graphqlTagName: string,\n  namespaceSpecifierName: string\n): boolean {\n  // For export const query = 'foobar' the declaration exists with type 'VariableDeclaration'\n\n  // Checks for:\n  // export const query = graphql``\n  // This case only has one item in the declarations array\n  // For export const hello = 10, world = 'foo'\n  // The array will have two items. So use every() to check if only one item exists\n  // With TaggedTemplateExpression and \"graphql\" name\n\n  // In addition the declaration can also be a MemberExpression like\n  // Gatsby.graphql`` when the import happened with import * as Gatsby from \"gatsby\"\n\n  return (\n    node.type === `ExportNamedDeclaration` &&\n    node.declaration?.type === `VariableDeclaration` &&\n    node.declaration?.declarations.every(el => {\n      if (\n        el?.init?.type === `TaggedTemplateExpression` &&\n        el.init.tag.type === `Identifier`\n      ) {\n        return el.init.tag.name === graphqlTagName\n      } else if (\n        el?.init?.type === `TaggedTemplateExpression` &&\n        el.init.tag.type === `MemberExpression`\n      ) {\n        return (\n          (el.init.tag.object as Identifier).name === namespaceSpecifierName &&\n          (el.init.tag.property as Identifier).name === DEFAULT_GRAPHQL_TAG_NAME\n        )\n      }\n      return false\n    })\n  )\n}\n\nconst limitedExports: Rule.RuleModule = {\n  meta: {\n    type: `problem`,\n    messages: {\n      limitedExportsPageTemplates: `In page templates only a default export of a valid React component and the named export of a page query is allowed.\n        All other named exports will cause Fast Refresh to not preserve local component state and do a full refresh.\n\n        Please move your other named exports to another file. Also make sure that you only export page queries that use the \"graphql\" tag from \"gatsby\".\n`,\n    },\n  },\n  create: context => {\n    if (!isPageTemplate(store, context)) {\n      return {}\n    }\n\n    let queryVariableName: string | undefined = ``\n    let graphqlTagName = ``\n    let namespaceSpecifierName = ``\n\n    return {\n      // const { graphql } = require('gatsby')\n      VariableDeclaration: (node): void => {\n        // Check if require('gatsby')\n        const requiredFromGatsby = (\n          node as VariableDeclaration\n        ).declarations.find(el => {\n          // Handle require(`gatsby`)\n          if (\n            (el.init as CallExpression)?.arguments?.[0]?.type ===\n            `TemplateLiteral`\n          ) {\n            return (\n              ((el.init as CallExpression).arguments[0] as TemplateLiteral)\n                ?.quasis[0].value.raw === `gatsby`\n            )\n          }\n\n          return (\n            ((el.init as CallExpression)?.arguments?.[0] as Literal)?.value ===\n            `gatsby`\n          )\n        })\n\n        if (requiredFromGatsby) {\n          // Search for \"graphql\" in a const { graphql, Link } = require('gatsby')\n          const graphqlTagSpecifier = (\n            (requiredFromGatsby as VariableDeclarator).id as ObjectPattern\n          )?.properties.find(\n            el =>\n              ((el as AssignmentProperty).key as Identifier).name ===\n              DEFAULT_GRAPHQL_TAG_NAME\n          )\n\n          if (graphqlTagSpecifier) {\n            graphqlTagName = (\n              (graphqlTagSpecifier as AssignmentProperty).value as Identifier\n            ).name\n          }\n        }\n\n        return undefined\n      },\n      // import { graphql } from \"gatsby\"\n      ImportDeclaration: (node): void => {\n        // Make sure that the specifier is imported from \"gatsby\"\n        if ((node as ImportDeclaration).source.value === `gatsby`) {\n          const graphqlTagSpecifier = (\n            node as ImportDeclaration\n          ).specifiers.find(el => {\n            // We only want import { graphql } from \"gatsby\"\n            // Not import graphql from \"gatsby\"\n            if (el.type === `ImportSpecifier`) {\n              // Only get the specifier with the original name of \"graphql\"\n              return el.imported.name === DEFAULT_GRAPHQL_TAG_NAME\n            }\n            // import * as Gatsby from \"gatsby\"\n            if (el.type === `ImportNamespaceSpecifier`) {\n              namespaceSpecifierName = el.local.name\n              return false\n            }\n            return false\n          })\n          if (graphqlTagSpecifier) {\n            // The local.name handles the case for import { graphql as otherName }\n            // For normal import { graphql } the imported & local name are the same\n            graphqlTagName = graphqlTagSpecifier.local.name\n          }\n        }\n        return undefined\n      },\n      TaggedTemplateExpression: (node): void => {\n        if (\n          (node as TaggedTemplateExpression).type ===\n            `TaggedTemplateExpression` &&\n          ((node as TaggedTemplateExpression).tag as Identifier)?.name ===\n            graphqlTagName\n        ) {\n          if (queryVariableName) {\n            return undefined\n          }\n          // @ts-ignore\n          queryVariableName = node.parent?.id?.name\n        }\n\n        return undefined\n      },\n      ExportNamedDeclaration: (node): void => {\n        if (hasOneValidNamedDeclaration(node, queryVariableName)) {\n          return undefined\n        }\n\n        if (isTemplateQuery(node, graphqlTagName, namespaceSpecifierName)) {\n          return undefined\n        }\n\n        if (isGetServerData(node)) {\n          return undefined\n        }\n\n        context.report({\n          node,\n          messageId: `limitedExportsPageTemplates`,\n        })\n\n        return undefined\n      },\n    }\n  },\n}\n\nmodule.exports = limitedExports\n"],"file":"limited-exports-page-templates.js"}